/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package barebones;

import java.util.*;
import java.io.*;
import javax.swing.JOptionPane;

/**
 *
 * @author kimat
 */
class Variable{
	public String identifier;
	public int val;
	public Variable(String identifier, int val){
		this.identifier = identifier;
		this.val = val;
	}
}

public class InterpreterGUI extends javax.swing.JFrame {

    /**
     * Creates new form InterpreterGUI
     */
    public InterpreterGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        currentFile = new javax.swing.JTextField();
        interpretButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stepThroughCode = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        finalVariables = new javax.swing.JTextArea();
        importFile = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        inputCode = new javax.swing.JTextArea();
        inputFile = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1252, 780));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SOURCE CODE");

        currentFile.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        currentFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentFileActionPerformed(evt);
            }
        });

        interpretButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        interpretButton.setText("INTERPRET CODE");
        interpretButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interpretButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("STEP THROUGH CODE");
        jLabel3.setToolTipText("");

        stepThroughCode.setColumns(20);
        stepThroughCode.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        stepThroughCode.setRows(5);
        stepThroughCode.setText("                           SOURCE CODE HAS NOT BEEN INTERPRETED YET");
        stepThroughCode.setWrapStyleWord(true);
        jScrollPane1.setViewportView(stepThroughCode);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("FINAL VARIABLE VALUES");
        jLabel4.setToolTipText("FINAL VARIABLE VALUES");

        finalVariables.setColumns(20);
        finalVariables.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        finalVariables.setRows(5);
        finalVariables.setText("                           SOURCE CODE HAS NOT BEEN INTERPRETED YET");
        finalVariables.setToolTipText("");
        jScrollPane2.setViewportView(finalVariables);

        importFile.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        importFile.setText("IMPORT FILE");
        importFile.setToolTipText("");
        importFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importFileActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 48)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("BARE BONES INTERPRETER");

        inputCode.setColumns(20);
        inputCode.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        inputCode.setRows(5);
        inputCode.setToolTipText("");
        inputCode.setWrapStyleWord(true);
        jScrollPane3.setViewportView(inputCode);

        inputFile.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        inputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFileActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("CURRENT FILE NAME");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("ENTER FILE NAME");

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(1274, Short.MAX_VALUE)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(interpretButton, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane3)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                    .addComponent(currentFile, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(importFile, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(inputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 1170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(importFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentFile, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(interpretButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void importFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importFileActionPerformed
        // TODO add your handling code here:
        String space = "                           ";
        finalVariables.setText(space+"SOURCE CODE HAS NOT BEEN INTERPRETED YET");
        stepThroughCode.setText(space+"SOURCE CODE HAS NOT BEEN INTERPRETED YET");
        inputCode.setText("");
        String fileName = inputFile.getText();
        String fileSource = readInputFile(fileName+".txt");            
        if(fileSource==null){
            JOptionPane.showMessageDialog(null, "File couldn't been found");
        }else{
            String code[] = fileSource.split(";");
            currentFile.setText(fileName);
            for(int i=0;i<code.length;i++){
                inputCode.append(code[i]+";\n");
            }
        } 
    }//GEN-LAST:event_importFileActionPerformed

    private void interpretButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interpretButtonActionPerformed
        // TODO add your handling code here:
        finalVariables.setText("");
        stepThroughCode.setText("");
        String currentFileName = currentFile.getText();
        String sourceCode = inputCode.getText();
       if(currentFileName.equals("") && sourceCode.equals("")){ //file hasn't been opened
           JOptionPane.showMessageDialog(null, "You need to import a file or type BareBones code into source code editor");
       }else if(sourceCode.equals("")){ //file is empty
           JOptionPane.showMessageDialog(null, "The current file imported is empty");
       }else if(currentFileName.equals("")){
           JOptionPane.showMessageDialog(null, "If you wish to create a new file you must give it a name using the CURRENT FILE NAME input box");
       }else{
           try{
                    String code[] = sourceCode.split(";");
                    PrintWriter writer = new PrintWriter(currentFileName+".txt", "UTF-8");
                    for(int i=0;i<code.length;i++){
                        writer.println(code[i]+";");
                    }
                    writer.close();
                    try{
                        interpretSourceCode(currentFileName+".txt");
                    }catch (Exception f){
                        JOptionPane.showMessageDialog(null, "There is something wrong with your source code ("+currentFileName+".txt)");
                    }
                    
            }catch (Exception e){
                    JOptionPane.showMessageDialog(null, "Error when trying to save "+currentFileName);
            }
       }
    }//GEN-LAST:event_interpretButtonActionPerformed

    private void currentFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentFileActionPerformed

    private void inputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputFileActionPerformed

    /**
     * @param args the command line arguments
     */
    //Interpreter code:
    
    Hashtable<Integer, Variable> variables = new Hashtable<Integer, Variable>();
    Hashtable<Integer, String> keyWords = new Hashtable<Integer,String>();
    public void setKeyWords(){
            String[] k = {"clear","incr","while","not","do","end","0","decr"};
            for(int i=0;i<8;i++){
                    keyWords.put(k[i].hashCode(),k[i]);
            }
    }	
    void addVariable(String identifier, int val){
            Variable newVar = new Variable(identifier,val);
            variables.put(identifier.hashCode(),newVar);
    }
    public String readInputFile(String fileName){
            String fileSource;
            try{
                    BufferedReader br = new BufferedReader(new FileReader(fileName));
                    StringBuilder sb = new StringBuilder();
                    String line = br.readLine();
                    while (line != null) {
                            sb.append(line);
                            line = br.readLine();
                    }
                    fileSource = sb.toString();
                    br.close();
            }catch (Exception e){
                    /* 
                    //CODE TO CHECK FOR PROBLEM
                    System.err.format("Exception occurred trying to read '%s'.", fileName);
                    e.printStackTrace();
                    */
                    return null;
            }
            return fileSource;
    }
    int findCurrentWhilePosInArray(int currentLineNum,int[][]arr, int length){
            for(int i=0;i<length;i++){
                    if(arr[i][0]==currentLineNum){
                            return i;
                    }
            }
            return (-1);
    }
    public int returnEndLineForWhile(int whileLine,String[] source){
            int whileLines[][]= new int[10][2];
            int len = 0;
            int i = whileLine+1;
            int newWhile;
            int temp;
            Boolean isFinish = false;
            while(!isFinish){
                    newWhile = whileLine;
                    while(!source[i].contains("end")){
                            if(source[i].contains("while")){
                                    temp = findCurrentWhilePosInArray(i,whileLines,len);
                                    if(temp!=-1){
                                            i = whileLines[temp][1];
                                    }else{
                                            newWhile = i;
                                    }
                            }
                            i+=1;
                    }			
                    if(newWhile==whileLine){
                            return i;
                    }else{
                            whileLines[len][0] = newWhile;
                            whileLines[len][1] = i;
                            len+=1;
                            i=0;
                    }
            }
            return (-1);
    }
    int findPreviousWhileLineNumber(int endLineNum,int length,int[][]arr){
            for(int i=0;i<length;i++){
                    if(arr[i][1]==endLineNum){
                            return arr[i][0];
                    }
            }
            return (-1);
    }
    public void printAllVariables(){
            Set<Integer> keys = variables.keySet();
            finalVariables.setText("");
            stepThroughCode.append("{ ");
            for(Integer key: keys){
                    stepThroughCode.append(variables.get(key).identifier + " = " + variables.get(key).val+ ", " );
                    finalVariables.append(variables.get(key).identifier + " = " + variables.get(key).val+"\n");
                    
            }
            stepThroughCode.append("}");
            stepThroughCode.append("\n");

    }
    public void interpretSourceCode(String fileName){
            setKeyWords();
            String fileSource = readInputFile(fileName);
            String sourceLines[] = fileSource.split(";");
            /*
            System.out.println("Interpreting: ");
            for(int i=0;i<sourceLines.length;i++){
                    System.out.println("Line " + i + ": " + sourceLines[i]);
            }
            */
            String nextInstruction; //while, clear, incr, decr
            int whileIndicator[][] = new int[10][2]; //lineNumStart,lineNumEnd
            int whileCount = 0;
            String foundVariable;
            int whilePos,redirect;
            redirect = 0;
            for(int i=0;i<sourceLines.length;i++){
                    foundVariable = "";
                    nextInstruction = "";
                    String words[] = sourceLines[i].split(" ");
                    System.out.println("");
                    System.out.println("CURRENTLY EXECUTING LINE " + i);
                    //Individual words in line
                    for(int j=0;j<words.length;j++){
                            if(!words[j].equals("")){
                                    if(keyWords.get(words[j].hashCode())==null){
                                            if(variables.get(words[j].hashCode())==null){
                                                    addVariable(words[j],0); //store found vaiable
                                            }
                                    foundVariable = words[j];
                                    }else if(words[j].equals("clear") | words[j].equals("incr") | words[j].equals("decr") | words[j].equals("end") | words[j].equals("while")){
                                            nextInstruction = words[j]; //update next instruction
                                    }
                            }
                    }
                    Variable foundVar = variables.get(foundVariable.hashCode());
                    switch(nextInstruction){
                                    case "clear":
                                            foundVar.val = 0;
                                            stepThroughCode.append("Line " + i + ": Finished executing clear instruction on line " + i+"\n" );
                                            stepThroughCode.append("Line " + i + ": Current values of variables: ");
                                            
                                            printAllVariables();
                                            break;
                                    case "decr":
                                            foundVar.val -=1;
                                            stepThroughCode.append("Line " + i + ": Finished executing decr instruction on line " + i + "\n" );
                                            stepThroughCode.append("Line " + i + ": Current values of variables: ");
                                            printAllVariables();
                                            break;
                                    case "incr":
                                            foundVar.val +=1;
                                            stepThroughCode.append("Line " + i + ": Finished executing incr instruction on line " + i +"\n");
                                            stepThroughCode.append("Line " + i + ": Current values of variables: ");
                                            printAllVariables();
                                            break;
                                    case "while":
                                            stepThroughCode.append("Line " + i + ": Going to execute while at line " + i+"\n");
                                            whilePos = findCurrentWhilePosInArray(i,whileIndicator,whileCount+1);
                                            if(whilePos==-1){ //first time interpreter sees this while statement so it needs to include it in whileIndicator array
                                                    whileIndicator[whileCount][0] = i;
                                                    whileIndicator[whileCount][1] = returnEndLineForWhile(i,sourceLines);
                                                    whileCount+=1;
                                            }	
                                            if(foundVar.val==0){
                                                    redirect = returnEndLineForWhile(i,sourceLines);
                                                    stepThroughCode.append("Line " + i + ": While condition hasn't been met for " + foundVariable + ": Need to exit while loop and redirect to line " + redirect+"\n");
                                                    stepThroughCode.append("Line " + i + ": Current values of variables: ");
                                                    printAllVariables();
                                                    i =  redirect ;  //branch statement
                                            }else{
                                                    stepThroughCode.append("Line " + i + ": While condition has been met for " + foundVariable +"\n");
                                                    stepThroughCode.append("Line " + i + ": Current values of variables: ");
                                                    printAllVariables();
                                            }
                                            break;
                                    case "end":
                                            stepThroughCode.append("Line " + i + ": Finished executing line " + i + "\n" );
                                            stepThroughCode.append("Line " + i + ": Current values of variables: ");
                                            printAllVariables();
                                            //branch to previous while
                                            redirect = findPreviousWhileLineNumber(i,whileCount,whileIndicator) -1;
                                            stepThroughCode.append("Line " + i + ": Reached end of while loop - need to redirect to start of while loop at line " + (redirect+1)+"\n");
                                            i = redirect;
                                            break;	
                    }		
                    redirect = i;
            }
            stepThroughCode.append("Last Line " + redirect + ": Finished stepping through program. \n");
            printAllVariables();

    }

    //Finish Interpreter code
    
    
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterpreterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterpreterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterpreterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterpreterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterpreterGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField currentFile;
    private javax.swing.JTextArea finalVariables;
    private javax.swing.JButton importFile;
    private javax.swing.JTextArea inputCode;
    private javax.swing.JTextField inputFile;
    private javax.swing.JButton interpretButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea stepThroughCode;
    // End of variables declaration//GEN-END:variables
}
